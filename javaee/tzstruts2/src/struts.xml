<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
          "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
          "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
    <!-- 更改配置文件不需要重新启动 -->
    <constant name="struts.devMode" value="true"></constant>
    <!-- 更改默认编码 -->  
    <constant name="struts.i18n.encoding" value="UTF-8"></constant> 
    
    <!-- page包：是可以继承的structs-default,获取struts2的默认功能 -->
    <!-- 默认命名空间是不需要指明的  namespace="/" -->
    <!-- 
        namespace="keke" 
                        注意点：在一个命名空间下面是不允许配置两个相同的Action的name,不同的命名空间下面是可以允许有同名的Action的name.
                        为什么这样做？
        1:业务更加清晰明了.
        2:开始一些组件应用，它脱离于业务开发比如：文件上传，文件下载，验证码。
        
                        在浏览器中访问http://localhost/tzstruts2/keke/reg_save;访问登录成功 
                        说明继承一个包后就可以继承这个包的默认功能。   
    -->
<!--     <package name="struts-defaults" abstract="true"> -->
         <!-- 通用配置拦截器，拦截器栈，全局返回结果集，全局result-type:默认返回值的指明result-types -->
         <!--          struts.properties -->
         <!--          gobal result -->
         <!--          results======freemaker -->
         <!--          静态内容 -->
         <!--          struts2+jdbc -->
<!--     </package>   -->
    <package name="strutsdefault" extends="struts-default">
         <!-- action就是对应得类name login com.keke.login.LoginAction对应的类 -->
         <!-- 根据ActionMapping{name='Login', namespace='/', method='null', extension='action', params=null, result=null} 进入对应的业务处理类！-->
         <action name="login" method="save" class="com.newstart.login.LoginAction" >
             <!-- 返回值不写默认是success -->
             <result>/loginSuccess.jsp</result>
             <result name="fail">/login.jsp</result>
         </action>
    </package>
    
    <package name="strutsdefault2" extends="strutsdefault" namespace="/keke">
         <!-- result的name如果不指明默认值是:success type的默认值是:dispatcher -->
         <!-- action就是对应得类name login com.keke.login.LoginAction对应的类 -->
         <!-- 根据ActionMapping{name='Login', namespace='/', method='null', extension='action', params=null, result=null} 进入对应的业务处理类！-->
         <action name="login_*" method="{1}" class="com.newstart.login.LoginAction" >
             <!-- 返回值不写默认是success ,在同一个结果集里面不允许有相同的result-->
             <result name="success">/loginSuccess.jsp</result>
             <result name="fail">/login.jsp</result>
             <!-- 返回页面源代码 -->
             <result name="plainText" type="plainText">/login.jsp</result>
             <!-- 重定向会造成值的丢失 -->
<!--         <result name="redirect" type="redirect">/loginSuccess.jsp?username=${username}&amp;password=${password}</result> -->
             <result name="redirectAction" type="redirectAction">Login_update.action</result>             
             <!-- 链表结构 -->
             <!-- 如果是重定向action的时候是不需要斜线,如果是chain是不需要加.action -->
             <result name="chain" type="chain">Login_update</result>
         </action>
    </package>
    <!-- 
	        注册到我们struts2.xml文件中file="xml路径"
	        指明的是classPath下面文件
	        和引入的顺序无关
	   1:分包:可以将大量的Action的配置包包含在其他文件中,让程序和业务逻辑变得跟加清晰明了.
	   2:低耦合，高内聚.
     -->
     <!-- 在同一个配置文件中是不允许有相同的命名空间，在同一个命名空间下面是不允许有相同的action-name -->
     <include file="struts_user.xml"></include>
     <include file="tm-common-defaults.xml"></include>
     <!-- 注册图片水印struts-image.xml -->
     <include file="com/newstart/action/img/struts-image.xml"></include>
     <include file="com/newstart/action/test/struts_login.xml"></include>
     <!-- 注册struts-login.xml -->
     <include file="com/newstart/action/iter/struts-login.xml"></include>
     <!-- 注册struts-value.xml -->
     <include file="com/newstart/action/test/struts-value.xml"></include>
</struts>
